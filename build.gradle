plugins {
    id 'java-library'
    id("maven-publish")
    id("org.ajoberstar.grgit").version("4.1.0")
    id("com.modrinth.minotaur").version("1.2.1")
}

String real_version = "${project.mod_version}"

if (project.pre_release != "") {
    real_version += "-${project.pre_release}+"
    real_version += grgit.head().abbreviatedId
}

version = real_version
group = project.group

var currentProject = project

allprojects {
    apply plugin: "maven-publish"

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.sourceCompatibility = JavaVersion.VERSION_1_8
        it.targetCompatibility = JavaVersion.VERSION_1_8
    }

    java {
        withSourcesJar()
    }
}

static String getMagiclibCompatName(String minecraftVersion) {
    String ret = minecraftVersion.replace(".", "_")
    int idx = ret.lastIndexOf("_")
    if (idx == -1) {
        return ""
    }
    if (idx != 1) {
        ret = ret.substring(0, idx)
    }
    return ret
}

subprojects {
    apply plugin: "fabric-loom"

    loom.runConfigs.configureEach {
        property("mixin.debug.export", "true")
    }

    version = currentProject.version
    group = currentProject.group


    repositories {
        maven {
            url 'https://www.cursemaven.com/'
        }
        maven {
            url = "https://api.modrinth.com/maven"
        }
        maven {
            url 'https://maven.hendrixshen.top'
        }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        minecraft("com.mojang:minecraft:${project.minecraft_version}")
        mappings(loom.officialMojangMappings())

        modImplementation("curse.maven:xaeros-world-map-317780:${project.xaero_world_map_version}")
        modImplementation("curse.maven:xaeros-minimap-263420:${project.xaero_minimap_version}")
        modImplementation("curse.maven:ommc-454900:${project.ommc_version}")

        modImplementation("top.hendrixshen:magiclib-compat-mc${currentProject.getMagiclibCompatName(project.minecraft_version)}:${project.magiclib_version}")


        if (project.name != (String) "${currentProject.mod_id}-core") {
            if (project.gradle.startParameter.taskNames.size() == 1 &&
                    project.gradle.startParameter.taskNames.get(0) == "runClient") {
                modImplementation(project(path: ":${currentProject.mod_id}-core")) {
                    transitive = false
                }
            } else {
                implementation(project(path: ":${currentProject.mod_id}-core")) {
                    transitive = false
                }
            }
        } else {
            //runtimeOnly(fileTree([dir: "../magiclib-compat-mc1_18/build/devlibs", include: ["magiclib-compat-mc1_18-${project.version}-dev.jar"]]))
            //runtimeOnly(fileTree(dir: "xaero_map_addition-compat-mc1_18/build/devlibs", include: ["*-dev.jar"]))
        }
        runtimeOnly(currentProject) {
            transitive = false
        }
    }
    processResources {
        inputs.property("version", currentProject.version)
        filesMatching("fabric.mod.json") {
            expand(["mod_version" : currentProject.version,
                    "mod_id"      : currentProject.mod_id,
                    "mod_name"    : currentProject.mod_name,
                    "mod_homepage": currentProject.mod_homepage,
                    "mod_sources" : currentProject.mod_sources,
                    "mod_license" : currentProject.mod_license
            ])        }
    }

    runClient {
        defaultCharacterEncoding = "UTF-8"
    }

    runServer {
        defaultCharacterEncoding = "UTF-8"
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
            }
        }

        repositories {
            mavenLocal()
            maven {
                url "${rootDir}/publish"
            }
        }
    }

}


import com.modrinth.minotaur.TaskModrinthUpload
import groovy.json.JsonBuilder

processResources {
    inputs.property "version", currentProject.version
    if (project.gradle.startParameter.taskNames.size() >= 1 &&
            project.gradle.startParameter.taskNames.get(0) != "runClient") {
        var jars = []
        subprojects.each({
            jars.add(["file": "META-INF/jars/${it.name}-${it.version}.jar"])
        })
        filesMatching(("fabric.mod.json"), {
            include("fabric.mod.json")
            expand(["mod_version" : currentProject.version,
                    "sub_jars"    : new JsonBuilder(jars).toPrettyString(),
                    "mod_id"      : currentProject.mod_id,
                    "mod_name"    : currentProject.mod_name,
                    "mod_homepage": currentProject.mod_homepage,
                    "mod_sources" : currentProject.mod_sources,
                    "mod_license" : currentProject.mod_license
            ])
        })
    }
}


jar {
    dependsOn(subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        copy {
            from {
                subprojects.collect {
                    it.remapJar.outputs.files
                }
            }
            into("build/tmp/submods/META-INF/jars")
        }
    }

    from("LICENSE")

    from("build/tmp/submods")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }

    repositories {
        mavenLocal()
        maven {
            url "${rootDir}/publish"
        }
    }
}